package 二叉树;

/**
 * 给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
 *
 * 完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，
 * 其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
 *
 输入：n = 12
 输出：3
 解释：12 = 4 + 4 + 4

 * 标签：动态规划
 * 首先初始化长度为 n+1 的数组 dp，每个位置都为 0
 * 如果 n 为 0，则结果为 0
 * 对数组进行遍历，下标为 i，每次都将当前数字先更新为最大的结果，即 dp[i]=i，比如 i=4，最坏结果为 4=1+1+1+1 即为 4 个数字
 * 动态转移方程为：dp[i] = MIN(dp[i], dp[i - j * j] + 1)，i 表示当前数字，j*j 表示平方数
 * 时间复杂度：O(n*sqrt(n))
 */
public class 完全平方数 {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        for (int i = 1; i < n; i++) {
            dp[i] = i;
            for (int j = 1; i - j * j >= 0; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
            }
        }
        return dp[n];
    }
}
